---
version: '3.7'
services:

  mysql-inventory:
    image: mysql
    container_name: mysql-inventory
    environment:
      MYSQL_DATABASE: inventory-service
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./app-data/mysql-inventory:/var/lib/mysql
    ports:
      - "3306:3306"
    restart: always

  mysql-order:
    image: mysql
    container_name: mysql-order
    environment:
      MYSQL_DATABASE: order-service
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./app-data/mysql-order:/var/lib/mysql
    ports:
      - "3307:3306"
    restart: always

  ## Mongo Docker Compose Config
  mongo-product:
    image: mongo
    container_name: mongo-product
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27017:27017"
    volumes:
      - ./app-data/mongo-data:/data/db

  ms-keycloak:
    image: quay.io/keycloak/keycloak
    container_name: ms-keycloak
    command: [ "start-dev", "--import-realm" ]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8180:8080"
    volumes:
      - ./app-configuration/keycloak/:/opt/keycloak/data/import/

  zookeeper-kafka:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper-kafka
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-kafka:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  ms-zipkin:
    image: openzipkin/zipkin
    container_name: ms-zipkin
    ports:
      - "9411:9411"

  ms-prometheus:
    image: prom/prometheus
    container_name: ms-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./app-configuration/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./app-data/prometheus/keycloak-client.secret:/etc/prometheus/keycloak-client.secret
    depends_on:
      - api-gateway
      - discovery-service
      - product-service


# microservices

  admin-server:
    image: admin-server
    container_name: admin-server
    build:
      context: admin-server
      dockerfile: Dockerfile.layered
    ports:
      - "8585:8585"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  ## Eureka Server
  discovery-service:
    image: discovery-service
    container_name: discovery-service
    build:
      context: discovery-service
      dockerfile: Dockerfile.layered
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - ms-zipkin

  api-gateway:
    image: api-gateway
    container_name: api-gateway
    build:
      context: api-gateway
      dockerfile: Dockerfile.layered
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - ms-zipkin
      - discovery-service
      - ms-keycloak

  ## Product-Service Docker Compose Config
  product-service:
    image: product-service
    build:
      context: product-service
      dockerfile: Dockerfile.layered
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-product
      - discovery-service
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    image: order-service
    build:
      context: order-service
      dockerfile: Dockerfile.layered
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mysql-order
      - kafka-broker
      - ms-zipkin
      - discovery-service
      - api-gateway
    

  ## Inventory-Service Docker Compose Config
  inventory-service:
    image: inventory-service
    build:
      context: inventory-service
      dockerfile: Dockerfile.layered
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mysql-inventory
      - discovery-service
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    image: notification-service
    build:
      context: notification-service
      dockerfile: Dockerfile.layered
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - ms-zipkin
      - kafka-broker
      - discovery-service
      - api-gateway
