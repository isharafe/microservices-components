spring.application.name=order-service

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# spring boot will pick a random free port
server.port=0

# embedd basic auth user and password, so that the eureka server can be accessed successfully
eureka.client.service-url.defaultZone=http://eureka:password@localhost:8761/eureka

# actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilienc4j properties

# we want to see different status of circuit breaker, close, open, half-open
resilience4j.circuitbreaker.instances.inventory.register-health-indicator=true
# how much buffer size going to take for the events
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# if a call failed, resilience4j waits for some number of requests before open the circuit
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=count-based
resilience4j.circuitbreaker.instances.inventory.sliding-window-size=5
# when 50% of the calls are failed
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
# wait x-seconds in Open state, before move to half-open state
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
# how many calls to allow in half open state to determine issue is fixed or not
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true
# if method didn't complete during mentioned time, it will throw a timeout exception
resilience4j.timelimiter.instances.inventory.timeout-duration=3s
